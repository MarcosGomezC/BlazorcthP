@page "/ListaAutores"
@using BlazorCTH.Shared
@using BlazorCTH.Shared.DTOS
@inject HttpClient Http
@inject NavigationManager navegar


<MudGrid AlignItems="AlignItems.Center">
    <MudItem xs="10" Class="d-flex justify-center">
        <MudText Typo="Typo.h4" Align="Align.Center">Lista de Autores</MudText>
    </MudItem>

    <MudItem xs="2" Class="d-flex justify-end">
        <MudIconButton Icon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       OnClick="(() => CrearAutor(NuevoAutor))" />
    </MudItem>

    <MudTextField @bind-Value="buscar" Label="Nombre del Autor" Variant="Variant.Outlined" FullWidth="true" style="width:55%" />
    <MudButton Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" OnClick="GetBuscarAutores">Buscar</MudButton>
</MudGrid>



<br />
<br />

<MudTable Items="@autors" Hover="true" Breakpoint="Breakpoint.Sm"
          Class="border-x-4 border-solid mud-border-primary pa-4" Square="true">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Accion</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Delete">
            <MudIconButton OnClick="(() => Delete(context.Id))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
            <MudIconButton OnClick="(() => UpdateAutor(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"></MudIconButton>
        </MudTd>
        
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>




@code {
    private bool _dense = false;
    private bool _loading = true;
    public int Id { get; set; }
    public List<Autor_DTO> autors { get; set; } = new List<Autor_DTO>();
    public Autor_DTO NuevoAutor { get; set; } = new Autor_DTO();
    public  Autor_DTO BuscarAutor { get; set; } = new Autor_DTO();
    public string buscar = "";


    protected override async Task OnInitializedAsync()
    {
        await GetAutores();
    }
    public async Task GetAutores()
    {
        autors = await Http.GetFromJsonAsync<List<Autor_DTO>>("api/autor/GetAutores");
    }
    public async Task GetBuscarAutores()
    {
        autors = await Http.GetFromJsonAsync<List<Autor_DTO>>($"api/autor/BuscarAutor/{buscar}");
        
    }
    public async Task Delete(int Id)
    {
        var autor = await Http.DeleteFromJsonAsync<Autor_DTO>($"api/autor/Borrar/{Id}");
        await GetAutores();
        StateHasChanged();
    }

    public async Task UpdateAutor(int Id)
    {
        navegar.NavigateTo($"/Crear/{Id}");
    }
    public async Task CrearAutor(Autor_DTO autor)
    {
        navegar.NavigateTo($"/Crear");
    }
}
