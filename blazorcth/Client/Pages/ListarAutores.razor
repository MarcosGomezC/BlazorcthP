@page "/ListaAutores"
@using BlazorCTH.Shared
@using BlazorCTH.Shared.DTOS
@using global::Shared.DTOS
@inject HttpClient Http
@inject NavigationManager navegar

@* <PageTitle>Lista de Autores</PageTitle>

<h1>Autores</h1>

<p>Nombre de Autores.</p>
 *@
@* @if (autors == null)
{
    <p><em>Loading...</em></p>
}else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID </th>
                <th>Nombre</th>
                <th>Accion</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var libros in autors)
            {   
                <tr>
                    <td>@libros.Id</td>
                    <td>@libros.Nombre</td>

                    <td> 
                        <button class="btn-danger" @onclick="(() => Delete(libros.Id))">Eliminar</button>
                        <button class="btn-info" style="color:crimson" @onclick="(() => UpdateAutor(libros.Id))" >Actualizar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} *@



<MudTable Items="@autors" Hover="true" Breakpoint="Breakpoint.Sm" >
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Accion</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Delete">
            <MudIconButton OnClick="(() => Delete(context.Id))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
            <MudIconButton OnClick="(() => UpdateAutor(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"></MudIconButton>
        </MudTd>
        
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>




@code {
    private bool _dense = false;
    private bool _loading = true;
    public int Id { get; set; }
    public List<Autor_DTO> autors { get; set; } = new List<Autor_DTO>();


    protected override async Task OnInitializedAsync()
    {
        await GetAutores();
    }
    public async Task GetAutores()
    {
        autors = await Http.GetFromJsonAsync<List<Autor_DTO>>("api/autor/GetAutores");
    }
    public async Task Delete(int Id)
    {
        var autor = await Http.DeleteFromJsonAsync<Autor_DTO>($"api/autor/Borrar/{Id}");
        await GetAutores();
        StateHasChanged();
    }

    public async Task UpdateAutor(int Id)
    {
        navegar.NavigateTo($"/Crear/{Id}");
    }
}
