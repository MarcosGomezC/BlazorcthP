@page "/Libros"
@using BlazorCTH.Shared
@using BlazorCTH.Shared.DTOS
@inject HttpClient Http
@inject NavigationManager navegar


    <MudGrid AlignItems="AlignItems.Center">
        <MudItem xs="10" Class="d-flex justify-center">
            <MudText Typo="Typo.h4" Align="Align.Center">Lista de Libros</MudText>
        </MudItem>

        <MudItem xs="2" Class="d-flex justify-end">
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           OnClick="(() => CrearLibro(NuevoLibro))" />
        </MudItem>
    </MudGrid>



<MudGrid Justify="Justify.FlexStart" Spacing="4">
    @foreach (var libro in libros)
    {
        <MudItem Style="flex: 0 0 16.6%; max-width: 16.6%;">
            <MudCard Class="rounded-md" Style="height: 450px; width: 100%;">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">I</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@libro.Nombre</MudText>
                        <MudText Typo="Typo.body2">@libro.NombreAutor</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardMedia Image="@libro.UrlPortada"
                              Style="width:100%; height:320px; object-fit:cover" />

                <MudCardActions>
                    <MudCheckBox @bind-Value="libro.Seleccionado" Color="Color.Secondary" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder"></MudCheckBox>
                    <MudIconButton OnClick="(() => Delete(libro.Id))" Icon="@Icons.Material.Filled.Delete" />
                    <MudIconButton OnClick="(() => UpdateLibro(libro.Id))" Icon="@Icons.Material.Filled.Edit" />
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>
@code {

    public List<Libro_DTO> libros = new List<Libro_DTO>();
    public List<Autor_DTO> autor = new List<Autor_DTO>();
    public Libro_DTO NuevoLibro { get; set; } = new Libro_DTO();



    protected override async Task OnInitializedAsync()
    {
        libros = await Http.GetFromJsonAsync<List<Libro_DTO>>("api/libro/GetLibros");
        await GetAutores();

    }
    public async Task GetAutores()
    {
        autor = await Http.GetFromJsonAsync<List<Autor_DTO>>("api/autor/GetAutores");
    }
    public async Task Delete(int Id)
    {
        var response = await Http.DeleteAsync($"api/libro/Borrar/{Id}");
        if (response.IsSuccessStatusCode)
        {
            libros.RemoveAll(l => l.Id == Id);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error al eliminar el libro");
        }

    }
    public async Task UpdateLibro(int Id)
    {

        navegar.NavigateTo($"/CrearLibros/{Id}");
    }
    public void CrearLibro(Libro_DTO libro)
    {
        navegar.NavigateTo($"/CrearLibros");
    }
}