@page "/CrearLibros"
@page "/CrearLibros/{IdAutor:int}"
@using BlazorCTH.Shared.DTOS
@inject HttpClient Http
@inject NavigationManager navegar


<MudCard style="width:55%" Class="form-control border-1">
    <MudText Typo="Typo.h5">Crear Libro</MudText>
     <MudToolBar>
        <MudTextField @bind-Value="NuevoLibro.Nombre" Label="Nombre del Libro" Variant="Variant.Outlined"  />
       
        <MudSelect class="ml-8" @bind-Value="NuevoLibro.IdAutor">
            <MudSelectItem Value="0">Seleccionar Autor</MudSelectItem>
            @foreach (var lista in autors)
            {
                <MudSelectItem Value="@lista.Id">@lista.Nombre</MudSelectItem>
            }
            </MudSelect>
            @if(IdAutor >0 )
            {
                <MudFab Variant="Variant.Filled" OnClick="(() => UpdateLibro(NuevoLibro))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium"></MudFab>
            }
            else
            {
                <MudFab Variant="Variant.Filled" OnClick="(() => CrearLibros(NuevoLibro))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium"></MudFab>

            }
             
            
        
    </MudToolBar>
   

 </MudCard>
@code {
    [Parameter]
    public int IdAutor { get; set; }
    public Libro_DTO NuevoLibro { get; set; } = new Libro_DTO();
    public Autor_DTO ListaAutor { get; set; } = new Autor_DTO();
    public List<Autor_DTO> autors = new List<Autor_DTO>();
    protected override async Task OnInitializedAsync()
    {
        if (IdAutor > 0)
        { await GetAutor(IdAutor); }
        await GetAutores();
    }

    public async Task GetAutor(int idLibro)
    {
        NuevoLibro = await Http.GetFromJsonAsync<Libro_DTO>($"api/libro/GetLibro/{idLibro}");
    }
    public async Task GetAutores()
    {
        autors = await Http.GetFromJsonAsync<List<Autor_DTO>>("api/autor/GetAutores");
    }
    public async Task CrearLibros(Libro_DTO libro)
    {
        var response = await Http.PostAsJsonAsync("api/libro/CrearLibros", libro);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Libro creado");
            navegar.NavigateTo($"/ListaAutores");

        }
        else
        {

            Console.WriteLine("Error al crear Libro");
        }
    }
        public async Task UpdateLibro(Libro_DTO libro)
        {
            var response = await Http.PutAsJsonAsync<Libro_DTO>($"api/libro/Actualizar/{libro.Id}", libro);
            navegar.NavigateTo($"/Libros");
        }
    }